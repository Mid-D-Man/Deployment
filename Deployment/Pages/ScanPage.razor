@page "/scan"
@using Microsoft.JSInterop
@inject QrScannerService QrScanner
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="qr-scanner-container">
    <input type="file" @ref="fileInput" accept="image/*" @onchange="HandleFileSelection" />
    <canvas @ref="canvasElement" id="@canvasId" style="display: none;"></canvas>
    
    @if (!string.IsNullOrEmpty(scanResult))
    {
        <div class="scan-result">
            <strong>QR Code Result:</strong> @scanResult
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">
            <strong>Error:</strong> @errorMessage
        </div>
    }
</div>

@code {
    private ElementReference fileInput;
    private ElementReference canvasElement;
    private string canvasId = $"qr-canvas-{Guid.NewGuid():N}";
    private string? scanResult;
    private string? errorMessage;
    private bool isInitialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isInitialized = await QrScanner.InitializeAsync();
            if (!isInitialized)
            {
                errorMessage = "Failed to initialize QR scanner";
                StateHasChanged();
            }
        }
    }

    private async Task HandleFileSelection(ChangeEventArgs e)
    {
        if (!isInitialized) return;

        try
        {
            errorMessage = null;
            scanResult = null;

            await JSRuntime.InvokeVoidAsync("eval", $@"
                const fileInput = document.querySelector('#{canvasId}').previousElementSibling;
                const file = fileInput.files[0];
                if (!file) return;

                const img = new Image();
                img.onload = function() {{
                    const canvas = document.getElementById('{canvasId}');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0);
                }};
                img.src = URL.createObjectURL(file);
            ");

            // Small delay to ensure image is drawn
            await Task.Delay(100);
            
            scanResult = await QrScanner.ScanFromCanvasAsync(canvasId);
            
            if (string.IsNullOrEmpty(scanResult))
            {
                errorMessage = "No QR code detected in the image";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Scanning error: {ex.Message}";
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await QrScanner.DisposeAsync();
    }
}