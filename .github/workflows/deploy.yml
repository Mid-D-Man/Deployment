name: Deploy Blazor WASM PWA to GitHub Pages

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish Blazor WASM
        run: |
          if [ -f "Deployment/Deployment.csproj" ]; then
            echo "Publishing Deployment/Deployment.csproj"
            dotnet publish Deployment/Deployment.csproj --configuration Release --no-build --output ./dist
          else
            echo "Looking for Blazor WASM project..."
            find . -name "*.csproj" -exec grep -l "Microsoft.AspNetCore.Components.WebAssembly" {} \; | head -1 | xargs -I {} dotnet publish {} --configuration Release --no-build --output ./dist
          fi

      - name: Prepare for GitHub Pages with PWA Support
        run: |
          mkdir -p ./pages
          
          if [ -d "./dist/wwwroot" ]; then
            cp -r ./dist/wwwroot/* ./pages/
          else
            echo "ERROR: wwwroot not found"
            exit 1
          fi
          
          # Critical: Add .nojekyll to prevent Jekyll processing
          touch ./pages/.nojekyll
          
          # Create 404.html for SPA routing
          cp ./pages/index.html ./pages/404.html
          
          # Update base href for GitHub Pages subpath in both files
          sed -i 's|<base href="/" />|<base href="/${{ github.event.repository.name }}/" />|g' ./pages/index.html
          sed -i 's|<base href="/" />|<base href="/${{ github.event.repository.name }}/" />|g' ./pages/404.html
          
          # Update manifest.json scope for GitHub Pages subpath
          if [ -f "./pages/manifest.json" ]; then
            sed -i 's|"start_url": "/Deployment/"|"start_url": "/${{ github.event.repository.name }}/"|g' ./pages/manifest.json
            sed -i 's|"scope": "/Deployment/"|"scope": "/${{ github.event.repository.name }}/"|g' ./pages/manifest.json
          fi
          
          # Update manifest.webmanifest if it exists
          if [ -f "./pages/manifest.webmanifest" ]; then
            sed -i 's|"start_url": "/Deployment/"|"start_url": "/${{ github.event.repository.name }}/"|g' ./pages/manifest.webmanifest
            sed -i 's|"scope": "/Deployment/"|"scope": "/${{ github.event.repository.name }}/"|g' ./pages/manifest.webmanifest
          fi
          
          # Fix MIME type issues - Add _headers file
          cat > ./pages/_headers << 'EOF'
          /*.wasm
            Content-Type: application/wasm
          /*.js
            Content-Type: application/javascript
          /*.webmanifest
            Content-Type: application/manifest+json
          EOF
          
          # Create .htaccess for Apache servers
          cat > ./pages/.htaccess << 'EOF'
          AddType application/wasm .wasm
          AddType application/javascript .js
          AddType application/manifest+json .webmanifest
          
          # SPA routing fallback
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.html [L]
          
          # PWA caching headers
          <IfModule mod_expires.c>
            ExpiresActive on
            ExpiresByType application/wasm "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 month"
            ExpiresByType text/css "access plus 1 month"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType application/manifest+json "access plus 1 week"
          </IfModule>
          EOF
          
          # Verify critical PWA files
          echo "=== Verifying PWA deployment ==="
          
          # Check service worker
          if [ -f "./pages/service-worker.js" ]; then
            echo "✅ Service worker found"
          else
            echo "❌ Service worker missing"
          fi
          
          # Check manifest
          if [ -f "./pages/manifest.webmanifest" ] || [ -f "./pages/manifest.json" ]; then
            echo "✅ Manifest found"
          else
            echo "❌ Manifest missing"
          fi
          
          # Check WASM files
          find ./pages -name "*.wasm" -type f -exec echo "Found WASM: {}" \;
          
          # Check service worker assets
          if [ -f "./pages/service-worker-assets.js" ]; then
            echo "✅ Service worker assets manifest found"
          else
            echo "❌ Service worker assets manifest missing"
          fi
          
          # Verify icons
          if [ -f "./pages/icon-192.png" ] && [ -f "./pages/icon-512.png" ]; then
            echo "✅ PWA icons found"
          else
            echo "❌ PWA icons missing"
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./pages

  deploy:
    if: github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4